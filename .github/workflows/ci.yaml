name: goodnotes_CI

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test with a KinD cluster
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create 2-node KinD Cluster
        uses: helm/kind-action@v1.10.0
        with:
          config: kind-config/kind-config.yaml
          cluster_name: ci-cluster

      - name: Deploy NGINX Ingress Controller üö™
        run: |
          # Apply the Ingress controller manifest recommended for KinD
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml

          # Wait for the Ingress controller to be ready before proceeding
          echo "Waiting for Ingress controller to be ready..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=120s

      - name: Verify Cluster and Nodes
        run: |
          echo "Current kubectl context:"
          kubectl cluster-info
          echo -e "\n\nCluster nodes:"
          kubectl get nodes -o wide
          echo -e "\n\nIngress pods:"
          kubectl get pods -n ingress-nginx

      - name: Test Ingress Controller Access
        run: |
          echo "Attempting to curl the Ingress controller via localhost..."
          # We expect a 404 Not Found, which is a success (it doesn't have any Ingress rules configured yet).
          # It proves the NGINX controller is up and responding to HTTP requests.
          # The -f flag makes curl treat HTTP errors (like 404) as a failure,
          # so we invert the exit code with '!' to make the step succeed.
          ! curl -f http://localhost/

      # Task 4: Deploy http-echo applications
      - name: Deploy foo and bar applications
        run: |
          echo "Deploying foo and bar applications..."
          kubectl apply -f k8s/k8s-http-echo-deploy.yaml
          
          echo "Waiting for deployments to be ready..."
          kubectl rollout status deployment/foo-app --timeout=2m
          kubectl rollout status deployment/bar-app --timeout=2m
          
          echo "Applications deployed successfully"

      - name: Verify deployments
        run: |
          echo "=== Foo Deployment ==="
          kubectl get deployment foo-app
          kubectl get pods -l app=foo
          
          echo "=== Bar Deployment ==="
          kubectl get deployment bar-app
          kubectl get pods -l app=bar
          
          echo "=== Services ==="
          kubectl get svc foo-service bar-service

      - name: Create Ingress for http-echo
        run: |
          echo "Creating Ingress resource..."
          kubectl apply -f k8s/k8s-http-echo-ingress.yaml
          
          echo "Waiting for Ingress to be ready..."
          sleep 10
          kubectl get ingress echo-ingress
          kubectl describe ingress echo-ingress

      - name: Test host-based routing with Host headers
        run: |
          echo "Testing foo.localhost with Host header..."
          RESPONSE=$(curl -s -H "Host: foo.localhost" http://localhost/)
          echo "Response: $RESPONSE"
          if [[ "$RESPONSE" == *"foo"* ]]; then
            echo "foo.localhost routing working correctly"
          else
            echo "foo.localhost routing failed"
            echo "Expected: foo"
            echo "Got: $RESPONSE"
            exit 1
          fi
          
          echo ""
          echo "Testing bar.localhost with Host header..."
          RESPONSE=$(curl -s -H "Host: bar.localhost" http://localhost/)
          echo "Response: $RESPONSE"
          if [[ "$RESPONSE" == *"bar"* ]]; then
            echo "bar.localhost routing working correctly"
          else
            echo "bar.localhost routing failed"
            echo "Expected: bar"
            echo "Got: $RESPONSE"
            exit 1
          fi
          
          echo ""
          echo "All host-based routing tests passed!"

      - name: Test invalid hostname (should fail)
        run: |
          echo "Testing invalid hostname (should not route)..."
          RESPONSE=$(curl -s -w "\n%{http_code}" -H "Host: invalid.localhost" http://localhost/)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          
          if [[ "$HTTP_CODE" == "404" ]]; then
            echo "Invalid hostname correctly rejected with 404"
          else
            echo "‚ö†Ô∏è Expected 404 for invalid hostname, got: $HTTP_CODE"
          fi